#include<iostream>
#include "String.h"
using namespace std;
void String :: copyString(char* const dest, const char* const src)
{
	int i = 0;
	if (src == nullptr)
	{
		return;
	}
	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i = i + 1;
	}
	dest[i] = '\0';
}
void String :: conctString(char* const dest, const char* const src)
{
	if (src == nullptr)
		return;
	int i = 0, j = tellLenght(dest);
	while (src[i] != '\0')
	{
		dest[j] = src[i];
		i = i + 1;
		j = j + 1;
	}
	dest[j] = '\0';
}
bool String :: isSubString(const char* destination, const char* key, int start = 0)
{
	int  j = 0, lenght = tellLenght(key), end = start + lenght;
	while (start < end)
	{
		if (destination[start] == key[j])
		{
			j = j + 1;
		}
		else
		{
			j = 0;
		}
		start = start + 1;
	}
	return j == lenght ? true : false;
}
int String :: tellLenght(const char* const src)
{
	int i = 0;
	if (src == nullptr)
	{
		return 0;
	}
	while (src[i] != '\0')
	{
		i = i + 1;
	}
	return i;
}
String :: String()
{
	data = nullptr;
	size = 0;
}
String :: String(char c)
{
	data = new char[2];
	size = 2;
	data[0] = c;
	data[1] = '\0';
}
String :: String(const char* src) :String()
{
	size = tellLenght(src);
	if (size == 0)
	{
		return;
	}
	size = size + 1;
	data = new char[size];
	copyString(data, src);
}
String::String(const String& ref):String()
{
	if (ref.size == 0)
		return;
	size = ref.size;
	data = new char[size];
	copyString(data, ref.data);
}
int String::getLenght()
{
	return tellLenght(data);
}
void String::display()
{
	cout << endl;
	if (data == nullptr)
	{
		return;
	}
	for (int i = 0; i <= getLenght(); i = i + 1)
	{
		cout << data[i];
	}
}
void String::reSize(int cap)
{
	if (cap <= 0)
	{
		this->~String();
		return;
	}
	char* temp = new char[cap+1];
	int i = 0;
	int lenght = getLenght();
	while (i < lenght && i < cap)
	{
		temp[i] = data[i];
		i = i + 1;
	}
	temp[i] = '\0';
	this->~String();
	size = cap;
	data = temp;
}
void String::insert(int index, String subStr)
{
	int lenght = getLenght(), subLenght = subStr.getLenght(), count = 0;
	if (size < lenght + subLenght)
	{
		reSize(lenght + subLenght);
	}
	char* temp = new char[lenght - index + 1];
	for (int i = index; i < lenght; i = i + 1)
	{
		temp[count] = data[i];
		count = count + 1;
	}
	temp[count] = '\0';
	count = 0;
	while (count < subLenght)
	{
		data[index] = subStr.data[count];
		index = index + 1;
		count = count + 1;
	}
	count = 0;
	while (temp[count] != '\0')
	{
		data[index] = temp[count];
		index = index + 1;
		count = count + 1;
	}
	data[index] = '\0';
}
void String ::remove(int index, int count = 1)
{
	int lenght = getLenght();
	while (index < lenght - count)
	{
		data[index] = data[index + count];
		index = index + 1;
	}
	data[index] = '\0';
}
char& String::at(int index)
{
	if (index >= 0 && index < size)
	{
		return data[index];
	}
	cout << "\nIndex is out of bound";
	exit(0);
}
bool String::isEmpty()
{
	if (data == nullptr)
	{
		return true;
	}
	return false;
}
int String::getSize()
{
	return size;
}
int String::find(String subStr, int start = 0)
{
	int j = 0, lenght = subStr.getLenght(), count = 0;
	bool status = true;
	while (data[start] != '\0')
	{
		if ((isSubString(data, subStr.data, start)) == 1)
		{
			status = false;
			count = count + 1;
		}
		start = start + 1;
	}
	return count;
}
int String::replace(String old, String newSubStr)
{
	int repet = find(old), subLenght = newSubStr.getLenght();
	int oldLenght = old.getLenght(), index = 0;
	if (repet == 0)
	{
		exit(0);
	}
	for (int i = 0; i < size; i = i + 1)
	{
		if (isSubString(data, old.data, index))
		{
			remove(index, oldLenght);
			insert(index, newSubStr);
			index = index + subLenght;
		}
		else
		{
			index = index + 1;
		}
	}
}
void String::trimLeft()
{
	int index = 0, i = 0;
	while (data[index] == '\t' || data[index] == ' ' || data[index] == '\n')
	{
		index = index + 1;
	}
	if (index == 0)
		return;
	for (; index < getLenght(); i = i + 1, index = index + 1)
	{
		data[i] = data[index];
	}
	data[i] = '\0';
}
void String::trimRight()
{
	int index = getLenght() - 1;
	while (data[index] == '\t' || data[index] == ' ' || data[index] == '\n')
	{
		index = index - 1;
	}
	if (index == getLenght() - 1)
		return;
	data[index + 1] = '\0';
}
void String::trim()
{
	trimLeft();
	trimRight();
}
void String::shrink()
{
	reSize(getLenght());
}
void String::makeUpper()
{
	for (int i = 0; i < getLenght(); i = i + 1)
	{
		if (data[i] >= 'a' && data[i] <= 'z')
		{
			data[i] = data[i] - 32;
		}
	}
}
void String::makeLower()
{
	for (int i = 0; i < getLenght(); i = i + 1)
	{
		if (data[i] >= 'A' && data[i] <= 'Z')
		{
			data[i] = data[i] + 32;
		}
	}
}
void String::reverse()
{
	if (getLenght() == 0)
		return;
	char* temp = new char[size];
	cout << size;
	int i = 0, j = getLenght() - 1;;
	while (j >= 0)
	{
		temp[i] = data[j];
		i = i + 1;
		j = j - 1;
	}
	temp[i] = '\0';
	data = temp;
}
int String :: compare(String s2)
{
	int lenght1 = getLenght(), lenght2 = s2.getLenght(), count = 0, sum;
	bool status = true;
	while ((count < lenght1 && count < lenght2) && status)
	{
		sum = data[count] - s2.data[count];
		status = (sum == 0 ? true : false);
		count = count + 1;
	}
	if (status == true)
	{
		if (lenght2 == lenght1)
		{
			return 0;
		}
		else if (count == lenght2)
		{
			return 1;
		}
		else
		{
			return -1;
		}
	}
	if (sum > 0)
	{
		return 1;
	}
	return -1;
}
String String::left(int count)
{
	String temp;
	if (count >= getLenght())
	{
		temp.reSize(getLenght());
		copyString(temp.data, data);
		return temp;
	}
	temp.reSize(count);
	if (count == 0)
		return temp;
	for (int i = 0; i < count && data[i] != '\0'; i = i + 1)
	{
		temp.data[i] = data[i];
	}
	temp.data[count] = '\0';
	return temp;
}
String String::right(int count)
{
	String temp;
	if (count >= getLenght())
	{
		temp.reSize(getLenght());
		copyString(temp.data, data);
		return temp;
	}
	temp.reSize(count);
	if (count == 0)
		return temp;
	count = getLenght() - count;
	for (int i = 0; data[count] != '\0'; i = i + 1, count = count + 1)
	{
		temp.data[i] = data[count];
	}
	temp.data[temp.size] = '\0';
	return temp;
}
String String::concatenate(String s2)
{
	String temp;
	temp.reSize(getLenght() + s2.getLenght());
	copyString(temp.data,data);
	conctString(temp.data, s2.data);
	return temp;
}
void String::input()
{
	char ch;
	int index = getLenght();
	cout << "\nEnter the string : ";
	cin.get(ch);
	while (ch != '\n')
	{
		if (index == size)
		{
			reSize((size == 0 ? 1 : size) * 2);
		}
		data[index] = (char)ch;
		index = index + 1;
		cin.get(ch);
	}
	data[index] = '\0';
}
long long int String :: convertToInteger() 
{
	long long int result = 0;
	int sign = 1;
	int i = 0;
	// Check for negative sign
	if (data[0] == '-') 
	{
		sign = -1;
		i = 1;
	}
	for (; i < size; i = i + 1) 
	{
		if (data[i] >= '0' && data[i] <= '9') 
		{
			result = result * 10 + (data[i] - '0');
		}
	}
	return result * sign;
}
String :: ~String()
{
	if (size == 0)
	{
		return;
	}
	delete[]data;
	data = nullptr;
	size = 0;

}