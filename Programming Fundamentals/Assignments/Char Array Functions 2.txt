#include<iostream>
using namespace std;
int getLenght(const char * const src)
{
	int i = 0;
	while (src[i] != '\0')
	{
		i = i + 1;
	}
	return i;
}
void copyString(char* const dest, const char* const src)
{
	int i = 0;
	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i = i + 1;
	}
        dest[i] = '\0';
}
void concatenateString(char* const dest, const char* const src)
{
	int i = 0, j = getLenght(dest);
	while (src[i] != '\0')
	{
		dest[j] = src[i];
		i = i + 1;
		j = j + 1;
	}
	dest[j] = '\0';
}
bool isSubString(const char* const dest, const char* const subString)
{
	int i = 0, j = 0, lenght = getLenght(subString);
	while (dest[i] != '\0' && j<lenght)
	{
		if (dest[i] == subString[j])
		{
			j = j + 1;
		}
		else
		{
			j = 0;
		}
		i = i + 1;
	}
	return j == lenght ? true : false;
}
void replaceStringByFindingDest(char* const dest, const char * const string, const char * const replace)
{
	if (isSubString(dest, string) == true)
	{
		int i = 0, j = 0, lenght = getLenght(string);
		while ( j < lenght)
		{
			if (dest[i] == string[j])
			{
				j = j + 1;
			}
			else
			{
				j = 0;
			}
			i = i + 1;
		}
		int k = i, q = i;
		while (dest[i] != '\0')
		{
			i = i + 1;
		}
		int* size = new int[i - k + 1 ];
		j = 0;
		while (dest[k] != '\0')
		{
			size[j] = dest[k];
			k = k + 1;
			j = j + 1;
		}
		size[j] = '\0';
		j = q - lenght;
		i = 0;
		while (replace[i] != '\0')
		{
			dest[j] = replace[i];
			i = i + 1;
			j = j + 1;
		}
		i = 0;
		while (size[i] != '\0')
		{
			dest[j] = size[i];
			j = j + 1;
			i = i + 1;
		}
		dest[j] = '\0';
	}
}
int main()
{
	char dest[30] = { "I love Mango very" }, src[12] = { "ahme"};
	replaceStringByFindingDest(dest, "Mango", "Strawberry");
	cout << dest;
	cout << endl;
	return 0;
}